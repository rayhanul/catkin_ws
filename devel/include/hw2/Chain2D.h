// Generated by gencpp from file hw2/Chain2D.msg
// DO NOT EDIT!


#ifndef HW2_MESSAGE_CHAIN2D_H
#define HW2_MESSAGE_CHAIN2D_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace hw2
{
template <class ContainerAllocator>
struct Chain2D_
{
  typedef Chain2D_<ContainerAllocator> Type;

  Chain2D_()
    : config()
    , W(0.0)
    , L(0.0)
    , D(0.0)  {
    }
  Chain2D_(const ContainerAllocator& _alloc)
    : config(_alloc)
    , W(0.0)
    , L(0.0)
    , D(0.0)  {
  (void)_alloc;
    }



   typedef std::vector<float, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<float>> _config_type;
  _config_type config;

   typedef float _W_type;
  _W_type W;

   typedef float _L_type;
  _L_type L;

   typedef float _D_type;
  _D_type D;





  typedef boost::shared_ptr< ::hw2::Chain2D_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::hw2::Chain2D_<ContainerAllocator> const> ConstPtr;

}; // struct Chain2D_

typedef ::hw2::Chain2D_<std::allocator<void> > Chain2D;

typedef boost::shared_ptr< ::hw2::Chain2D > Chain2DPtr;
typedef boost::shared_ptr< ::hw2::Chain2D const> Chain2DConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::hw2::Chain2D_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::hw2::Chain2D_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::hw2::Chain2D_<ContainerAllocator1> & lhs, const ::hw2::Chain2D_<ContainerAllocator2> & rhs)
{
  return lhs.config == rhs.config &&
    lhs.W == rhs.W &&
    lhs.L == rhs.L &&
    lhs.D == rhs.D;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::hw2::Chain2D_<ContainerAllocator1> & lhs, const ::hw2::Chain2D_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace hw2

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::hw2::Chain2D_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::hw2::Chain2D_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hw2::Chain2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::hw2::Chain2D_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw2::Chain2D_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::hw2::Chain2D_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::hw2::Chain2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d7a949109af612580b026ed4500df1c3";
  }

  static const char* value(const ::hw2::Chain2D_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd7a949109af61258ULL;
  static const uint64_t static_value2 = 0x0b026ed4500df1c3ULL;
};

template<class ContainerAllocator>
struct DataType< ::hw2::Chain2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "hw2/Chain2D";
  }

  static const char* value(const ::hw2::Chain2D_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::hw2::Chain2D_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32[] config \n"
"float32 W\n"
"float32 L\n"
"float32 D\n"
;
  }

  static const char* value(const ::hw2::Chain2D_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::hw2::Chain2D_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.config);
      stream.next(m.W);
      stream.next(m.L);
      stream.next(m.D);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Chain2D_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::hw2::Chain2D_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::hw2::Chain2D_<ContainerAllocator>& v)
  {
    s << indent << "config[]" << std::endl;
    for (size_t i = 0; i < v.config.size(); ++i)
    {
      s << indent << "  config[" << i << "]: ";
      Printer<float>::stream(s, indent + "  ", v.config[i]);
    }
    s << indent << "W: ";
    Printer<float>::stream(s, indent + "  ", v.W);
    s << indent << "L: ";
    Printer<float>::stream(s, indent + "  ", v.L);
    s << indent << "D: ";
    Printer<float>::stream(s, indent + "  ", v.D);
  }
};

} // namespace message_operations
} // namespace ros

#endif // HW2_MESSAGE_CHAIN2D_H
